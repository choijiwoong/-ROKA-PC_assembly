<133~139>
	[구조체]
1.	어셈블리 관점에서 볼때, 구조체는 원소들의 크기가 제각각인 배열로 볼 수 있다. 고로 어셈블리에서 구조체의 원소에 접근하기 위해서는 구조체의 시작주소와 각 원소의 상대 오프셋(relative offset)을 알아야 한다.
	원소의 번째 수만 알면 오프셋계산이 가능한 배열과 달리, 구조체 원소들은 컴파일러에 의해 오프셋이 지정된다. 
	 ANSI C표준에 따르면 메모리 상에 배열된 구조체는 struct정의의 순서와 동일해야 하고, 첫 번째 원소는 구조체의 최상단에 위치해야한다고 하였다(오프셋0). 
	우리는 오프셋을 보다 쉽게 구하기 위해 stddef.h의 offsetof(구조체, 원소)를 사용하여 해당 구조체의 원소 오프셋을 쉽게 구할 수 있다.
	
	[메모리 배열하기]
2.	gcc사용 시, offsetof매크로로 short, int순 구조체에서 int 오프셋을 구하면 4를 리턴하게 되는데, gcc를 포함한 다수의 컴파일러 들이 변수들을 기본적으로 더블워드 경계에 놓기 때문이다. 고로 그냥 offsetof를 사용하는게 계산하는거보다 좋다.
	 구조체가 asm에서만 사용된다면 오프셋을 직접 지정하면 되지만, C와 사용하면 무조건 C와 asm코드의 오프셋이 일치해야 한다. 
	이러한 문제를 해결하기 위해 gcc는 데이터 정렬방법을 지정할 수 있게 했는데, 아래와 같다.
	typedef short int unaligned_int __attribute__((aligned(1)));
	unaligned_int라는 바이트 경계에 맞춘 새로운 타입을 정의하는데, gligned의 인자 1은 2의 멱수들로 바뀔 수 있다. (2는 워드정렬, 4는 더블워드 정렬..등등)
	(하지만 unaligned_int뒤 구조체 원소로 double가 온다면 double은 따로 지정을 해두지 않은 일반 타입이기에 다시 더블워드경계에 놓이게 된다.)
	 gcc는 구조체의 압축(pack)을 지원하는데, 이는 컴파일러로 하여금 구조체 생성 시 최소한의 공간만을 사용하게 하는 것이다. 아래의 경우 15바이트만을 사용한다.

	struct S{
	 short int x;//2byte
	 int y;//4byte
	 double z;//8byte
	} __attribute__((packed));

3.	마이크로소프트사와 볼랜드 컴파일러는 아래와 같은 #pragma 지시어를 통해 위와 동일한 작업을 할 수 있다.

	#pragme pack(1) 
	이는 컴파일러가 바이트 경계에 맞추어 구조체의 원소들을 압축하게 한다. 이는 다른 지시어에 의해 변경되기 전까지 효력을 발휘하는데, 
	만약 pragma가 있는 헤더파일이 다른 구조체를 포함한 헤더파일보다 먼저 포함(include)되었다면, 구조체는 기본값과 다른 방식으로 메모리 상에 배열될 수 있다. 이러한 오류는 찾기가 매우 힘들다. 즉, 프로그램의 각기 다른 모듈들이 구조체의 원소들을 각기 다른 장소에 배열하게 한다.
	 이러한 문제를 막기 위해 마이크로소프으와 볼랜드는 아래와 같은 방식으로 현재의 정렬 방법을 저장 후 복원할 수 있게 하였다.
	
	#pragma pack(push)
	#pragma pack(1)
	
	struct S{
	 short int x;
	 int y;
	 double z;
	};

	#pragma pack(pop)

	[비트필드]
4.	비트필드는 구조체 멤버들로 하여금 특정한 크기의 비트만 사용할 수 있게 하는데, 비트의 크기가 8의 배수가 되어야 할 필요가 없는데, 방법은 아래와 같다.

	struct S{
	 unsigned f1:3; //bit field 3
	 unsigned f2:10; //bit field 10
	 unsinged f3:11; //bit field 11
	 unsigned f4:8; //bit field 8
	};
	위는 f4(8bit), f3(11bit), f2(10bit), f1(3bit) 순으로, 첫번째 비트필드는 더블워드의 최하위 비트들을 가리킨다.
	 근데 사실 실제로 메모리 상에 저장되는 형식은 좀 복잡한데, 비트필드가 바이트 경계에 걸쳐있을 때의 경우다. 리튼 엔지안 형식에서는 바이트가 메모리에 거꾸로 저장되기 때문에 실제 구조는
	f21(5bit), f1(3bit) || f31(3bit), f2m(5bit) || f3m(8bit) || f4(8bit) 와 같다. (||는 바이트 경계를 의미하고, f21은 f2비트필드의 하위 5비트이다.)
	 근데 이건 실제 저장방법일 뿐이라 데이터가 프로그램 바깥으로 전송되지 않는 한 중요하지 않다. 실제로 하드웨어 장치 인터페이스를 만들 때, 홀수의 비트를 가지는 비트필드를 유용하게 사용하는 경우가 잦다.
	대표적인 예로 SCSI로, SCSI장치에 직접적으로 읽기 명령을 내릴때에는, 형식을 지켜 6바이트의 메시지를 장치에 전달한다. 다만 이 형식에서 논리 블록 주소(logical block address)가 3개의 다른 바이트에 걸쳐있어 조금 까다롭긴 하다.

5.	아래는 모든 컴파일러에 대해서 사용이 가능하게끔 코딩한 SCSI명령의 정의이다.

	#define MS_OR_BORLAND (defined(__BORLANDC__)\ || defined(_MSC_VER)) ;MS나 볼랜드의 경우 팜
	
	#if MS_OR_BORLAND
	#pragma pack(push)
	#pragma pack(1)
	#endif

	struct SCSI_read_cmd{
	 unsigned opcode:8;
	 unsigned lba_msb:5;
	 unsigned logical_unit:3;
	 unsigned lba_mid:8; //middle bit
	 unsigned lba_lsb:8;
	 unsigned transfer_length:8;
	 unsigned control:8;
	}
	#if defined(_GNUC__)
		__sttrivute__((packed))
	#endif
	;//struct definition end

	#if MS_OR_BORLAND
	#pragma pack(pop)
	#endif
	
	여기서 SCSI규칙대로라면 lba_mid와 lba_lsb는 연결시켜서 하나의 16비트필드로 만들 수 있었겠지만, 데이터가 빅 엔디안 순서로 되어있기 때문인데, 16비트필드는 컴파일러에 의해 리틀엔디안 순서로 저장될 것이기 때문이다.???
	또한 규칙대로라면 lba_msb보다 logical_unit이 먼저 들어가야겠지만, 이 경우라면 순서대로 집어넣어져야 한다.??? (그니까 아래 3째 줄처럼 원래 규칙은 아닌데, 리틀엔디안을 고려해서 넣어지면 한번 순서가 뒤바뀔 때니 미리 뒤집혀둔채로 넣어 들어갔을때 정상 순서가 되게 한다는 느낌인듯)
	 위의 SCSI_read_cmd 필드의 모습은 아래와 같다.
	제어(8) || 전달크기(8) || lba_lsb(8) || lba_mid(8) || 논리 단위(3), lba_msb(5) || opcode
	이 순서대로 메모리에 리틀 엔디안 순서로 저장된다면 비트들은 정해진 규칙에 맞게끔 배열될 것이다.

6.	여기서 끝이 아니라^^ SCSI_read_cmd는 MS C에서 작동이 완벽하게 안되는데, 컴파일러가 더블워드의 배수로 만들기 위해 2바이트를 덧붙여 sizeof(SCSI_read_cmd)리턴이 6이 아닌 8을 리턴하기 때문이다.. 고로 모든 필드를 unsigned short로 정의하여 해결한다.(이하생략)
	아래의 코드는 unsigned char을 이용하여 오직 두 개의 비트필드를 이용한 코드이다.
	
	struct SCSI_read_cmd{
	 unsigned char opcode;
	 unsigned char lba_msb:5;
	 unsigned char logical_unit:3;
	 unsigned char lba_mid;
	 unsigned char lba_lsb;
	 unsigned char transfer_length;
	 unsigned char control;
	}
	#if defined(__GNUC__)
		__attribute__((packed))
	#endif
	;

	
	[어셈블리에서 구조체 이용하기]
7.	C는 구조체가 함수 리턴값으로 사용되게 하는데, 당연히 EAX레지스터에 구조체 저장&리턴이 불가하다. 고로 여러 컴파일러들이 각기 다른 방법으로 해결하는데, 대표적인 방법이 컴파일러가 내부적으로 함수를 구조체를 가리키는 포인터를 인자로 갖게 변경시켜 루틴 밖에 정의된 구조체에 반환값 대입을 가능하게 한다.
	대부분의 어셈블러는 어셈블리 코드에서 구주체 정의를 자체적으로 지원하는 방법이 있으니 알아서 궁금하면 참고하자.