<57~> 68
	[조건 분기 명령을 피하기]
1.	현대의 프로세서들은 빠른 처리를 위해 CPU의 병령처리기술을 통한 추론적 실행(speculative execution)을 수핸한다. 이는 비효율적이다.
	SETxx명령은 특정한 경우에서 분기를 이용하지 않는 방법을 제공하는데, 이는 플래그 레지스터에 따라 바이트 레지스터나 메모리의 값을 0또는 1로 바꿔준다.
	SET다음의 문자는 조건분기와 같다. SETxx의 조건이 참이면 그 결과는 1, 거짓이면 0이 저장된다.
		setx al; Zero플래그가 set되면 1, 아니면 0이 al에 저장.
	(MAX값을 찾는 프로그램은 cmp와 조건분기를 사용하면 되지만, 조건분기없이 SET을 이용한 처리예제)_잘 이해안됨ㄷㄷㅎㅎ
	
	[C에서 비트값 바꾸기]
2.	만약 부호없는 형식의 값을 shift하면 논리 쉬프트가 이루어지고, 부호있는형식(ex. int)을 shift하면 산술 쉬프트가 이루어진다.
	short int s; 		//as 16bit
	short unsigned u;
	s=-1;				//s=0xFFFF(2의 보수)
	u=100;				//u=0x0064
	u=u|0x0100;			//u=0x0164
	s=s&0xFF0;			//s=0xFFF0
	s=s^u;				//s=0xFE94
	u=u<<3;				//u=0x0B2O(논리 쉬프트)
	s=s>>2;				//s=0xFFA5(산술 쉬프트)

3.	많은 수의 운영체제 API(Application Programming Interface)는 (ex. POSIX와 Win32) 비트로 데이터가 인코드(encode)된 피연산자를 사용하는 함수를 사용한다.
	POSIX 파일 시스템 접근 권한에는 user(owner), group, others가 있는데, 파일의 권한을 변경하기 위해선 C프로그래머가 각각의 비트를 수정할 수 있어야 한다.
	고로 몇가지 매크로(S_IRUSR, S_IRGRP, S_IROTH 등등..)를 제공하는데, chmod함수는 파일의 권한을 설정하기 위해 사용된다.
	 인자로 권한을 설정할 파일의 이름 문자열과, 권한설정에 대한 정수(Integer)값을 갖는다. 아래의 코드는 오너는 파일 읽고쓰기가능, 그룹은 읽기 가능, 아더는 접근불가로 설정하는 코드이다.
	chmod("foo", S_IRUSR | S_IWUSR | S_IRGRP); 
	 POSIX stat함수로 현재 파일의 접근 권한 비트값을 알아낼 수 있는데, chmod함수와 사용하면 다른 값들을 바꾸지 않고 현재 파일의 권한들을 변경할 수 있다.
	아래의 코드는 아더의 쓰기권한을 지우고, 오너에 읽기 권한을 추가하는 명령이다.
	struct stat file_stats; //stat()이 사용할 구조체(stat을 file_stats에 저장)
	stat("foo", &file_stats); //read file information. permission bit is in file_stats.st_mode
	chmod("foo", (file_stats.st_mode&S_IWOTH)|S_IRUSR);
	
	[Expression of Big & Little Endian]
4.	Endian은 멀티바이트 데이터의 원소들의 개개의 바이트(not bit)를 저장하는 순서이다.
	더블워드12345678(16)표현에서 빅 엔디안은 12 34 56 78순으로 저장하지만, 리틀 엔지안에선 78 56 34 12순으로 저장된다.
	 칩 디자이너에게 데이터를 저장하거나 읽을 때 리틀엔디안을 사용하기 때문에 부수적인 작업이 있어야 한다고 물을 수 있겠지만, 아무런 부수적인 작업이 없다.
	CPU는 비트값에만 작업하는 수 많은 전기회로로 구성되어 있다. 또한 비트들의 순서는 CPU에서 정렬되어 있을 필요가 없다.

	2바이트 AX레지스터를 생각해보면 이는 2개의 바이트 레지스터 AH와 AL로 나뉜다. CPU에서는 AH와 AL레지스터의 값들을 지정하는 회로들이 있지만, 이 회로들이 CPU에서 특정한 순서대로 놓여있지 않다. 
	왜냐하면 AX레지스터의 값을 메모리로 복사하는 mov명령은 AL의 값을 복사한 다음 AH의 값을 복사하지만, 이 순서를 바꿔서 해도 CPU에선 아무런 상관이 없기 때문이다.
	 이 논리를 바팅으로 개개의 비트들에도 적용이 되기에 개개의 비트들이 CPU내부적으로 어떠한 순서로 이들이 놓여있는지 알 방법도 없고 필요도 없다.
	unsigned short word=0x1234;	//sizeof(short)==2라 생각
	unsigned char *p=(unsigned char *)&word;
	if(p[0]==0x12)
		printf("Big Endian Machine!\n");
	else
		printf("Little Endian Machine!\n");
	위 코드를 통해 CPU가 무슨 엔디안을 사용하는지 알 수 있다. p포인터는 word를 두 개의 원소를 가지는 문자 배열로 취급하기에 p[0]에 word의 메모링 저장딘 값의 첫 번째 바이트가 된다. 위의 코드 결과는 PCU가 어떤 Endian을 사용하냐에 따라 결과가 다르게 나타난다.
	
	[Little&Big Endian을 신경써야하는 경우]
5.	대부분의 프로그래밍 시 CPU의 Endian형식을 신경쓰지 않아도 되지만, 두개의 서로 다른 컴퓨터 시스템에서 이진 데이터가 송신될 때 이를 심각하게 고려해야 한다.(주로 특정한 형식의 물리 데이터 미디어. 디스크나 네트워크)
	아스키는 단일 바이트이므로 엔디안이 문제가 되지 않지만, 모든 TCP/IP 헤더들은 데이터를 빅 엔디안 형식(네트워크 바이트 순서(network byte order))로 정수들을 저장한다.
	고로 TCP/IP라이브러리는 C로 하여금 엔디안 문제들을 해결하기 위한 함수들을 지원하는데, 예로 htonl()함수는 더블워드를 host의 엔디안 형식에서 wetwork의 엔디한 형식으로 변환한다. 
	ntohl()는 htonl와는 정반대로 동작하며, 두 함수들은 입력값을 변화시키지 않고 리턴한다. 고로 프로그래머들은 네트워크 프로그램들은 엔디안의 형식에 상관하지 않고 올바르게 작동할 수 있게 한다.
	(htonl함수의 원리를 C로 구현한 코드를 참고)
6.	80486프로세서는 32비트 레지스터의 바이트를 역순으로 재배치 하는 명령인 BSWAP를 추가하였다.
	bswap edx; edx's bite to reverse
	이 명령은 16비트 레지스터에서는 사용할 수 없지만 XCHG는 두개의 8비트 레지스터로 쪼개어 질 수 있는 16비트 레지스터의 바이트를 역순으로 재배치 할 수 있다.
	xchg ah, al; ax의 바이트를 역순으로 재배치
	
	[비트 수 세기]
7.	6.count 1 bit in EAX.asm에서 직관적인 비트 수세기를 해보았는데, 이번에는 덜 직관적이지만 이번 장에서 논의된 비트연산을 이용하여 세어보자.
	1) 비트 연산을 활용하여 1만날떄마다 cnt++, cnt 리턴
	2) 1만날때마다 lookup_table에 저장, lookup_table의 합 리턴
	3) shift를 이용하여 per 1bit, 2bit, 4bit,,,의 partial sum을 리턴