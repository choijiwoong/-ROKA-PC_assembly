<39~46>
	[2의 보수의 산술 연산]
1.	add와 sub는 flag register의 2개의 비트, overflow, carry flag를 변경한다.
	2의 보수를 사용하면 부호없는 정수에 대하여 add와 sub가 정확히 일치하다는 것이 장점이다.
2.	mul(부호없는정수)이나 imul(부호있는정수)를 사용하는데, 곱셈의 방법이 부호없느 정수와 2의 보수의 부호있는 정수들과 다르기 때문이다.
	mul source에서 source는 즉시값(immediate value)를 제외한 레지스터나 메모리의 한 값이 되는데, source의 크기에 따라 곱셈 연산 실행방법이 달라진다.
	(source가 byte크기라면 AL레지스터의 바이트와 곱해져 16비트 AX에 저장, 16비트라면 AX의 워드와 곱해져 32비트 결과값으로 DX:AX에 저장)
	
	imul은 mul과 명령과 형식이 같지만 몇 개의 다른 명령 형식들이 추가되면서 2~3개의 source를 가질 수 있다
	imul dest, source1
	imul dest, source1, source2
3.	div(부호없는정수), idiv(부호있는정수)
	div source
	(source가 8비트라면 AX는 source로 나뉘어 지며 몫이 AL에 저장되고 나머지는 AH에 저장된다. source가 16지트라면 DX:AX는 소스에 의해 나누어 지고 몫은 AX에, 나머지는 DX에 저장된다.)
	
	idiv는 imul과 달리 특별히 추가된 것이 없지만, 몫이 레지스터에 저장되기 너무 크거나 나누는 수가 0이면 프로그램이 인터럽트되고 종료된다. 가장 흔한 에러는 DX와 EDX를 나눗셈 하기 전에 초기화하지 않는 것이다.
4.	neg명령은 피연산자의 2의 보수를 계산하여 부호를 바꾼다. 
	neg source에서 source는 8비트, 16비트, 32비트 레지스터거나 메모리 값이어야 한다.
	
	[확장 정밀도 산술 연산]
5.	어셈블리어에서 ADD와 SUB명령은 받아올림/내림이 발생하면 carry flag의 값을 변경했는데, 큰 수를 작은 더블워드 조각(혹은 더 작게)으로 쪼개어서 연산이 가능하게 했다.
	ADC와 SBB명령은 이 캐리 플래그에 저장된 정보를 이용하여 더블워드보다 큰 수의 연산을 수행한다.
	ADC: operand1=operand1+carry flag+operand2
	SBB: operand1=operand1-carry flag-operand2
	
	Ex1) edx:eax와 ebx:ecx레지스터에 저장된 64비트 정수들의 합을 edx:eax레지스터에 넣을 때
	add eax, ecx;add 하위 32비트
	adc edx, ebx;add 상위 32비트와 이전의 덧셈 캐리
	
	Ex2) ebx:ecx를 edx:eax에서 뺼 때
	sub eax, ecx;sub 하위 32비트
	sbb eda, ebx;sub 상위 32비트 with 받아내림
	
	정말 큰 수의 경우, 루프를 사용한다. 첫번째 루프에서 ADD명령은 CLC(캐리 클리어, Clear Carry)명령을 통해 0으로 만들 수 있고, 그 뒤 되풀이 되는 부분마다 ADC명령을 사용하면 된다. CLC를 사용하여 캐리플래그를 0으로 만든다면 ADD나 ADC는 아무 차이가 없어지기 때문이다. 위는 뺄셈도 마찬가지이다
	
	[제어 구조]
6.	어셈블리에선 if나 while대신 goto나 잘못 사용 시 난잡한 코드를 만들 수 있는 것들을 지원하기에 어셈브리 코딩 시 고급언어로 프로그램 구조를 디자인 한 뒤에 동일한 어셈블리로 바꾸는 것이 바람직하다(like compiler)
	[비교]
7.	데이터의 비교를 통해 제어구조를 결정하기에 80x86은 CMP명령을 지원한다. flag register도 cmp연산의 두 source의 차이에 의해 설정된다.
	 부호없는 정수들의 경우 2개의 플래그(제로, 캐리)가 중요한데, 제로 플래그는 두 피 연산자의 차이가 0일 때 set된다. 
	cmp vleft, vright
	이때 vleft-vright의 차이가 계산되어 이에 따라 플래그가 세팅되는데, cmp결가가 0이면(vleft=vright) ZF가 set되고 CF가 unset된다.
	만약 vleft>vright라면 ZF가 unset되고 CF도 unset된다. vleft<vright라면 ZF가 unset되고, CF가 set된다.
	(이때 cmp는 vleft-vright의 차이를 가지고 flag만 setting하는 것이기에 차를 얻으려면 sub를 사용하면 된다.)
	 부호가 있는 정수라면, 3개의 플래그(ZF, OF, SF)가 중요하다. OF는 결과가 오버플로우시 set되고, SF는 연산의 결과가 음수면 set된다. 그리고 vleft=vright면 ZF가 set된다.
	또한 나머지는 부호없는 정수들의 경우와 마찬가지인데, vleft>vright면 ZF가 unset, SF=OF가 된다. vleft<vright라면 ZF가 unset되고 SF!=OF이다.
	(이때 오직 CMP만 flag register의 값을 바꾸는 것이 아니라 다른 연산들도 flag를 건든다는 사실을 명심해야 한다.)
	
	[분기 명령]
8.	Branch instruction은 프로그램의 임의의 부분으로 실행의 흐름을 옮기는 goto문과 같다.
	분기명령의 종류는 2가지로 goto와 같은 무조건 분기 명령과, flag register의 flag status에 따라 분기를 결정하는 조건 분기 명령이 있다. 조건 분기명령에서 분기가 일어나지 않으면 다음 명령이 실행된다.
	 JMP(jump)명령은 무조건 분기 명령을 실행한다. 하나의 인자로 분기할 코드의 라벨(code label)을 가진다. 
	JMP명령의 바로 다음 명령으로 분기하지 않는다면 그 명령은 수행되지 않는다!!
	 SHORT명령은 매우 한정된 범위에서 분기한다. 메모리 상 최대 128바이트까지 분기. 점프할 변위(displacement)를 저장하기 위해 1 부호있는 바이트를 사용. 
	EIP에 이 변위가 더해진다. short분기를 명확히 지정하기 위해선 SHORT키워드를 JMP명령에서의 라벨 바로 앞에 써주면 된다
	 NEAR명령은 무조건/조건 분기의 기본형태로 세그먼트의 어떠한 부분으로도 점프가 가능하다. 80386은 2바이트로 대략 32000바이트 위아래 분기를 지원하며, 4바이트로 어디로든문 분기를 지원해준다.
	80386보호모드에선 4바이트 유형이 기본값으로 설정되어있는데, 2바이트 유형을 설정하고 싶다면 JMP명령 라벨 앞에 WORD를 써주면 된다.
	 FAR명령은 다른 코드 세그먼트로의 분기를 허용한다.(이러한 경우는 80386보호모드에서 매우 드물다.)
9.	코드라벨은 코드세그먼트에서 label문장 바로 앞에 놓임으로써 정의된다.
10.	코드 라벨을 인자로 갖는 많은 조건 분기 명령들(JZ, JNZ, JO, JNO, JS, JNS, JC, JNC, JP, JNP)이 있는데, flag register의 하나의 flag값만 보고 분기를 결정한다. (PF는 parity flag로 하위 8비트수의 홀짝성을 나타냄)
11.	if(EAX==0)
		EBX=1;
	else
		EBX=2;
	
	위 pseudo code를 어셈블리로 포팅하면
	
	cmp eax, 0;flag setting
	jx thenblock;if ZF set, branch to thenblock
	mov ebx, 2
	jmp next
thenblock:
	mov ebx, 1
next:
12.	만약 EAX가 5이상이라면, ZF가 세트되거나 언세트되고 SF는 OF와 같을 텐데, 
	if(EAX>=5)
		EBX=1;
	else
		EBX=2;
	는 
	cmp eax, 5
	js signon;SF가 1이면 signon으로 branch
	jo elseblock;OF=1, SF=0이면 elseblock으로 branch
	jmp thenblock;SF=0, OF=0이면 thenblock으로 branch
	signon:
		jo thenblock;SF=1, OF=1이면 thenblock으로 branch
	elseblock:
		mov ebx, 2
		jmp next
	thenblock:
		mov ebx, 1
	next:
13.	12의 위 코드는 존나게 난해한데, 80x86는 저런 작업을 훨씬 쉽게 하도록 여러 분기명령(JE, JNE, JL&JB..등등)을 더 지원한다.
	(참고로 JL는 jump less than; 미만이면 분기, JNG는 jump not greater thant or equal to; 같거나 초과가 아니면 분기로 동인한 명령이다.)
	 이러한 새 분기 명령을 이용하여 위의 의사코드는 아래와 같이 보다 쉽게 어셈블리어로 나타낼 수 있다.
	cmp eax, 5
	jge thenblock
	mov ebx, 2
	jmp next
thenblock:
	mov ebx, 1
next: