<51~53> 8 4 2 1 오늘 목표는 68?ㅋㅋ
[비트 연산]
	[논리 쉬프트]
1.	쉬프트는 왼쪽(최상위비트 방향)이나 오른쪽(최하위비트 방향)으로 일어날 수 있는데, 언제나 새롭게 나오는 비트는 0이다.
	SHL, SHR명령은 각각 왼쪽, 오른쪽 shift연산을 수행한다. shift할 자리수는 상수이거나, CL레지스터에 저장된 값이어ㅑ 하며, 쉬프트된 마지막 비트는 캐리 플래그에 저장된다.
	mov ax, 0C123H ;H는 16진수라는 뜻 (1100000100100011)
	shl ax, 1; ax=8246H, CF=1 (1000001001000110)
	shr ax, 1; ax=4123H, CF=0 (0100000100100011)
	shr ax, 1; ax=2091H, CF=1 (0010000010010001)
	
	mov ax, 0C123H
	shl ax, 2; ax=048CH, CF=1
	
	mov cl 3
	shr ax, cl; ax=0091H, CF=1
2.	shift연산은 부호 없는 정수들의 빠른 곱셈과 나눗셈 연산에 자주 사용되는데, MUL이나 DIV명령에 비해 매우 빠르기 때문이다.
	부호있는 정수라면 2바이트 FFFF(-1)이 shr되면, 7FFF로 (+32,767)이 되기 때문이다. 고로 부호있는 값에서는 다른 형태의 쉬프트 연산이 사용되어야 한다.
	
	[산술 쉬프트]
3.	부호비트가 올바르게 설정 되어있다는 전제 하에 부호 있는 정수의 2의 멱수의 곱셈과 나눗셈을 위해 SAL(SHL과 동일. 부호비트가 쉬프트 연산에 의해 바뀌지 않는 이상 정확), 
	SAR(부호비트;최상위 비트를 쉬프트 하지 않고, 하위 7비트들만 shift되며, 늘 그렇듯이 마지막 shift비트는 캐리 플래그에 저장된다.)이 만들어 졌다. 
	mov as=x, 0C123H (1 100000100100011)
	sal ax, 1; ax=8246H, CF=1 (1 000001001000110)
	sal ax, 1; ax=048CH, CF=1
	sar ax, 2; ax=0123H, CF=0
	
	[회전 쉬프트]
4.	논리쉬프트처럼 작동하지만, 쉬프트를 통해 사라진 데이터가 새롭게 추가되는 데이터와 같다는 점이 차이점이다. 즉, 데이터를 하나의 순환고리로 본다. 약간 stream같넴
	ROL과 ROR은 각각 왼쪽, 오른쪽 회전을 가리키며, 마지막 쉬프트 비트를 캐리 플래그에 저장한다.
	mov ax, 0c123H; (1100000100100011)
	rol ax, 1; ax=8247H, CF=1 (1000001001000111)
	rol ax, 1; ax=048FH, CF=1
	rol ax, 1; ax=091EH, CF=0
	ror ax, 2; ax=8247H, CF=1
	ror ax, 1; ax=C123H, CF=1
	
	데이터의 비트들과 함께 캐리 플래그의 값을 회전시키는 명령들도 있는데, RCL과 RCR이다. 즉, AX레지스터가 이 명령으로 회전된다면 AX와 캐리 플래그와 함께 총 17비트가 회전되게 된다.
	mov ax, 0C123H
	clc; clear the carry flag(CF=0) ;(1100000100100011) (0)
	rcl ax, 1; ax=8246H, CF=1 (1000001001000110) (1)
	rcl ax, 1; ax=048DH, CF=1 (0000010010001101) (1)
	rcl ax, 1; ax=091BH, CF=0 (0000100100011011) (0)
	rcr ax, 2; ax=8246H, CF=1
	rcr ax, 1; ac=C123H, CF=0
	
	[불리안 비트 연산]
5.	프로세서는 불리안 연산에 대해 데이터의 각 비트에 적용 시킨다.
	mov ax, 0C123H
	and ax, 82F6H; ax=8022H
	
	mov ax, 0C123H
	or ax, 0E831H; ax=E933H
	
	mov ax, 0C123H
	xor ax, 0E831H; ax=2912H
	
	mov ax, 0C123H
	not ax; ax=3EDCH
	
	NOT연산은 1의 보수를 찾기에 다른 Bitwise operation들과는 달리 FLAGS레지스터의 어떠한 값도 바꾸지 않는다.
	
	[TEST 명령]
6.	AND연산을 수행하지만 결과를 보관하지 않고 오직 연산 결과에 따라 FLAGS값을 바꾼다. like CMP가 sub vleft, vright를 수해아지만, FLAGS값만 바꾼 것 처럼 (ex. 연산결과가 0이면 ZF셋)

	[비트 연산의 사용]
7.	비트연산은 개개의 값을 다른 비트에 전혀 영향을 주지 않고 수정하는 경우 매우 편리하다.
	
	mov ax, 0C123H 							(1100000100100011)
	or ax, 8; 3번째 비트를 킨다. ax=C12BH 		(1100000100101011)
	and ax, 0FFDFH; 5번쨰 비트를 끈다. ax=C10BH 	(1100000100001011)
	xor ax, 8000H; 31비트를 반전. ax=410BH 		(0100000100001011)
	or ax, 0F00H; 니블을 킨다. ax=4F0BH 			(0100111100001011)
	and ax, 0FFF0H; 니블을 끈다. ax=4F00H 		(0100111100000000)
	xor ax, 0F00FH; 니블을 반전. ax=BF0FH 		(1011111100001111)
	xor ax, 0FFFFH; 1의 보수(like not)ax=40F0H	(0100000011110000)
	
8.	adc를 이용해 비트세기

	mov bl, 0; bl은 값이 1인 비트의 수이다.
	mov ecx, 32; loop counter
count_loop:
	shl eax, 1; shift bit to carry flag
	adc bl, 0; add bl carry flag.
	loop count_loop
	
9.	AND연산은 2의 멱수로 나눈 나머지를 찾는데 사용할 수 있는데, 2^i로 나눈 수의 나머지를 찾기 위해선 (2^i)-1인 마스크와 AND연산을 하면 된다. 이 마스크는 i-1까지 모두 1이다.
	이 마스크에 나머지가 저장된다.
	mov eax, 100; 100=64H				(01100100)
	mov ebx, 0000000FH; mask 16-1=15(F)	(00001111)
	and ebx, eax; ebx=remainder=4		(00000100)
	그냥 규칙처럼 외워둬야겠다.
	
10.	CL레지스터를 이용하여 데이터의 임의 비트 수정이 가능하다. 아래의 코드에서 BH에 세트될 비트의 위치가 저장되어 있다.
	1) 임의의 비트 1로 만들기
	mov cl, bh	;make target  	(3)
	mov ebx, 1	;for make 1		(1111)
	shl ebx, cl	;shift CL times	(1000)
	or eax, ebx ;or.			(eax or 1000) to turn on bit
	
	2) 임의의 비트 0으로 만들기
	mov cl, bh;		(2)
	mov ebx, 1		(1111)
	shl ebx, cl		(1100)
	not ebx			(0011)????2번과 3번이 바뀌는데
	;대충 shr ebx, 1 이런꼴로 사이즈에 따라 만들면 될거같은데 sizeof가 있는것도 아니곰.. 레지마다 size가 정해져있으려남 32bit라넴. 우선 패수
	and eax, ebx	(eax and 0011) to turn off bit
	
	3) 임의의 비트 반전시키기_XOR을 이용하자!
	mov cl, bh	(3)
	mov ebx, 1	(1111)
	shl ebx, cl	(1000)
	xor eax, ebx(eax xor 1000)
	
	4) 모든 비트 0으로 반들기
	xor eax, eax; eax=0
	위와같은 방법은 mov eax, 0보다 기계어 코드가 작기에 자주 사용된다.