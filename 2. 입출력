<24~29>
	[입출력]
1.	I/O는 컴퓨터 시스템 하드웨어와의 소통을 필요로 하는 매우 시스템 종속적인 작업이기에 직접 하드웨어에 접근하거나 운영체제의 저수준 루틴을 사용해야하는데, 
	어셈블리코드에서 표준 C입출력 라이브러리 루틴을 사용할 수 있기에 어셈블리 루틴과 함께 주로 C언어를 사용한다.
	
	print_int; EAX값 출력
	print_char; AL에 저장된 아스키 값에 대응하는 문자 출력
	print_string; EAX에 저장된 문자열의 주소값에 해당하는 문자열을 화면에 출력_문자열은 반드시 C형식(null종료)
	print_nl; 화면에 개행문자 출력
	read_int; 키보드로 정수입력 후 EAX레지스터에 저장
	read_char; 키보드로부터 문자입력 후 아스키 값을 EAX레지스터에 저장
	
	NASM에서 저자의 I/O루틴을 포함시키려면 %include "asm_io.inc"
	
	[디버깅]
2.	저자의 asm_io.inc라이브러리는 프로그램을 디버깅하는데에 컴퓨터의 상태를 변경하지 않고 화면에 그대로 상태를 출력하게 하는 매트로들이다.
	dump_regs, dump_mem, dump_stack, dump_math들은 레지스터, 메모리, 스택, 수학 보조프로세서에 들어있는 값들을 모두 보여준다.
	
	dump_regs; 레지스터의 값을 stdout 16진수로 출력하며 flag register의 bit set를 화면에 출력한다. 다른 dump_regs명령의 출력을 구분하기 위해 정수 인자 하나를 가진다.(제로 플래스 true면 ZF출력)
	dump_mem; 메모리의 일부 영역의 값들을 16진수나 아스키로 출력. 인자는 3개로 구분용정수, 출력을 위한 메모리 주소, 주소 뒤에 출력될 16바이트 패러그래프 수이다. 
	dump_stack; CPU의 스택 값들을 출력한다. 안자는 3개로 구분용정수, EBP레지스터에 저장된 주소 아래부터 출력할 더블워드 수, EBP레지스터 주소 위로 출력할 더블워드의 수
	dump_math; 수치 부프로세서의 레짓스터 값을 출력. 인자는 구분용정수 1개
	
	[프로그램 만들기]
3.	어셈블리를 다른 플랫폼에 포팅하는 것은 어렵고, 일부 중요한 루틴에만 사용된다. 하지는 어셈블리를 배우는 이유는 크게 4가지 이다.
	-떄로 컴파일러의 목적코드보다 어셈블리어로 직접 쓴 코드가 빠르고 작을 수 있다.
	-고급언어에서 힘들거나 불가능한 시스템 하드웨어의 직접접근이 가능하다.
	-컴퓨터의 작동원리를 깊게 파악할 수 있다.
	-고급언어의 메카니즘 파악에 도움이 된다.
4.	초기화되지 않은 데이터는 반드시 bss세그먼트에서 선언되어야 한다. 코드세그먼트는 역사적으로 .text라 불려왔다. 
	또한 메인 루틴의 라벨에 접두어_(under score)가 사용되었는데, 이는 C함수 호출 규약(C calling convetion)의 일부이다. 이는 C가 사용하는 규칙들을 사용함을 명시한다.(window)
	global지시어는 어셈블러로 하여금 _asm_main라벨을 전역으로 생성하라는 것을 알려준다. C와는 달리 라벨들은 내부 지역(internal scope)이 기본으로 된다.
	하지만 전역 지시어를 이용하면 external scope에서도 사용이 가능하다. 예로 asm_io모듈은 print_int등을 모두 전역으로 선언한다 이때문에 우리가 first.asm모듈에서 이를 사용할 수 있다.
	
	[컴파일러 의존성]
5.	위 코드는 GNU의 DJGPP C/C++컴파일러에서만 돌아간다. 이 컴파일러는 COFF(Common Object File Format)형식의 목적파일을 이용하고, 이 형식으로 어셈블하기 위해서는 
	nasm과 함께 -f coff스위치를 사용해야한다. (참고로 리눅스의 목적파일은 ELF(Excutable and Linkable Format)형식을 이용하고 -f elf스위치를 이용하면 된다.)
6.	코드를 어셈블하기 위해서는 nasm -f object-format 2.first.asm을 입력하면 되는데, object-format부분에는 coff, elf, obj, win32가될 수 있으며, 사용할 C컴파일러에 따라 달라진다.
7.	DJGPP에서 C코드를 컴파일하려면 gcc -c driver.c를 입력하면 되고, -c스위치는 링트없는 단순 컴파일을 의미한다.
8.	링킹은 기계어코드와 목적파일과 라이브러리파일의 데이터를 하나로 합쳐 실행가능한 파일을 만드는 과정으로, C코드는 표준 C라이브러리와 특별한 개시 코드(startup code)를 필요로 한다.
	이는 C컴파일러가 정확한 매개 변수와 함께 링커를 호출하고 직접적으로 링커를 호출하는 작업을 훨씬 쉽게 해준다.
	gcc -o first driver.o 2.first.o asm_io.o를 하면 2.first.exe파일이 만들어진다.
	 컴파일과 링크과정을 묶을 수 있는데, gcc -o first driver.c 2.first.o asm_io.o를 하면 된다.

	[어셈블리 리스트 파일 이해]
9.	-l listing-file 스위치로 리스트 파일 생성명령을 할 수 있다. 이를 통해 어셈블 과정을 알 수 있는데, 
	첫 번째 열은 각 행의 번호를 표시하고 두 번째 열은 세그먼트의 데이터 오프셋을 16진수로 나타내고, 세번 째 열은 저장될 16진수 값을 보여준다. 마지막은 소스코드가 나타나게 된다.
	 두번째 열의 오프셋은 실제 프로그램에서의 데이터 오프셋과 다를 가능성이 매우 높은 것이, 명령어들이 보통 opcode는 알 수 있지만, 완전한 코드를 바로바로 계산하지 못하기에(링크되기전까지)
	임시적으로 대괄호 안의 정확한 오프셋값을 몰라 임시적으로 0을 넣고, 그 뒤 코드가 링트되면 링커가 정확한 오프셋 값을 넣는다.
	 이때 오프셋 값에 빅, 리틀 엔디안 표현을 볼 수 있는데, 프로세서마다 정수를 메모리 상에 다른 순서로 저장하기 때문이다. 우리가 생각하는 방식 그대로 즉, MSB부터 저장하는 빅엔디안,
	반대로 LSB부터 저장되는 리틀엔디안이 있다. 이 형식은 CPU에 따라 정해져 있어 바뀔 수 없다.
10.	컴퓨터가 Litle Endian을 사용하는지, Big Endian을 사용하는지 프로그래머는 구별할 필요가 없지만, 이진 데이터가 서로 다른 컴퓨터로 전송되거나, 멀티바이트 정수 데이터가 메모리에 쓰이고 개개의 바이트로 읽어 질 때의 경우 엔디안을 아는 것이 중요하다.

	[뼈대 파일(Skeleton file)]
11.	